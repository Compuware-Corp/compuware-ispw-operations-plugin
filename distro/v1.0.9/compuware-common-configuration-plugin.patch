diff --git a/src/main/java/com/compuware/jenkins/common/configuration/CESConnection.java b/src/main/java/com/compuware/jenkins/common/configuration/CESConnection.java
new file mode 100644
index 0000000..0bd80f4
--- /dev/null
+++ b/src/main/java/com/compuware/jenkins/common/configuration/CESConnection.java
@@ -0,0 +1,43 @@
+package com.compuware.jenkins.common.configuration;
+
+import java.util.List;
+
+import org.apache.commons.lang3.builder.ToStringBuilder;
+import org.apache.commons.lang3.builder.ToStringStyle;
+
+public class CESConnection {
+
+	private String url;
+	private List<CESToken> tokens;
+
+	public CESConnection() {
+	}
+
+	public CESConnection(String url, List<CESToken> tokens) {
+		this.url = url;
+		this.tokens = tokens;
+	}
+
+	public String getUrl() {
+		return url;
+	}
+
+	public void setUrl(String url) {
+		this.url = url;
+	}
+
+	public List<CESToken> getTokens() {
+		return tokens;
+	}
+
+	public void setTokens(List<CESToken> tokens) {
+		this.tokens = tokens;
+	}
+
+	@Override
+	public String toString() {
+		ToStringBuilder.setDefaultStyle(ToStringStyle.MULTI_LINE_STYLE);
+		return ToStringBuilder.reflectionToString(this);
+	}
+
+}
diff --git a/src/main/java/com/compuware/jenkins/common/configuration/CESToken.java b/src/main/java/com/compuware/jenkins/common/configuration/CESToken.java
new file mode 100644
index 0000000..4856933
--- /dev/null
+++ b/src/main/java/com/compuware/jenkins/common/configuration/CESToken.java
@@ -0,0 +1,40 @@
+package com.compuware.jenkins.common.configuration;
+
+import org.apache.commons.lang3.builder.ToStringBuilder;
+import org.apache.commons.lang3.builder.ToStringStyle;
+
+public class CESToken {
+	private String hostName;
+	private String token;
+
+	public CESToken() {
+	}
+
+	public CESToken(String hostName, String token) {
+		this.hostName = hostName;
+		this.token = token;
+	}
+
+	public String getHostName() {
+		return hostName;
+	}
+
+	public void setHostName(String hostName) {
+		this.hostName = hostName;
+	}
+
+	public String getToken() {
+		return token;
+	}
+
+	public void setToken(String token) {
+		this.token = token;
+	}
+
+	@Override
+	public String toString() {
+		ToStringBuilder.setDefaultStyle(ToStringStyle.MULTI_LINE_STYLE);
+		return ToStringBuilder.reflectionToString(this);
+	}
+
+}
diff --git a/src/main/java/com/compuware/jenkins/common/configuration/CpwrGlobalConfiguration.java b/src/main/java/com/compuware/jenkins/common/configuration/CpwrGlobalConfiguration.java
index c044bfc..5ea3a86 100644
--- a/src/main/java/com/compuware/jenkins/common/configuration/CpwrGlobalConfiguration.java
+++ b/src/main/java/com/compuware/jenkins/common/configuration/CpwrGlobalConfiguration.java
@@ -16,6 +16,15 @@
  */
 package com.compuware.jenkins.common.configuration;
 
+import hudson.CopyOnWrite;
+import hudson.Extension;
+import hudson.Launcher;
+import hudson.init.InitMilestone;
+import hudson.init.Initializer;
+import hudson.model.Item;
+import hudson.security.ACL;
+import hudson.util.ListBoxModel;
+
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -25,25 +34,20 @@
 import java.util.ResourceBundle;
 import java.util.Set;
 import java.util.logging.Logger;
+
+import jenkins.model.GlobalConfiguration;
+import net.sf.json.JSONArray;
+import net.sf.json.JSONObject;
+
 import org.apache.commons.lang.StringUtils;
 import org.kohsuke.stapler.StaplerRequest;
+
 import com.cloudbees.plugins.credentials.CredentialsProvider;
 import com.cloudbees.plugins.credentials.common.StandardUsernamePasswordCredentials;
 import com.cloudbees.plugins.credentials.domains.DomainRequirement;
 import com.cloudbees.plugins.credentials.matchers.IdMatcher;
 import com.compuware.jenkins.common.utils.CommonConstants;
 import com.compuware.jenkins.common.utils.NumericStringComparator;
-import hudson.CopyOnWrite;
-import hudson.Extension;
-import hudson.Launcher;
-import hudson.init.InitMilestone;
-import hudson.init.Initializer;
-import hudson.model.Item;
-import hudson.security.ACL;
-import hudson.util.ListBoxModel;
-import jenkins.model.GlobalConfiguration;
-import net.sf.json.JSONArray;
-import net.sf.json.JSONObject;
 
 /**
  * Class to handle Compuware global configuration settings.
@@ -54,6 +58,9 @@
 	// Constants
 	private static Logger m_logger = Logger.getLogger("hudson.CpwrGlobalConfiguration"); //$NON-NLS-1$
 
+	public static final String CES_URL = "ces.url";
+	public static final String CES_TOKENS= "ces.tokens";
+	
 	private static final String CODE_PAGE_MAPPINGS = "com.compuware.jenkins.common.configuration.codePageMappings"; //$NON-NLS-1$
 	/** Host connection instance ID defined in config.jelly */
 	private static final String HOST_CONN_INSTANCE_ID = "hostConn"; //$NON-NLS-1$
@@ -124,6 +131,58 @@
 	}
 
 	/**
+	 * Returns CES connection with its tokens
+	 * 
+	 * @return CES connection
+	 */
+	public CESConnection getCESConnection() {
+
+		String cesUrl = getSystemProperty(CES_URL);
+
+		List<CESToken> cesTokenList = new ArrayList<CESToken>();
+		String cesTokens = getSystemProperty(CES_TOKENS);
+
+		String[] hostTokens = cesTokens.split(";");
+		for (String hostToken : hostTokens) {
+			hostToken = StringUtils.trimToEmpty(hostToken);
+			if (StringUtils.isNotBlank(hostToken)) {
+				int indexOfColon = hostToken.indexOf(":");
+				if (indexOfColon != -1) {
+					String host = StringUtils.trimToEmpty(hostToken.substring(
+							0, indexOfColon));
+					String token = StringUtils.trimToEmpty(hostToken.substring(
+							indexOfColon + 1, hostToken.length()));
+					if (StringUtils.isNotBlank(host)
+							&& StringUtils.isNotBlank(token)) {
+						cesTokenList.add(new CESToken(host, token));
+					}
+				}
+			}
+		}
+
+		CESConnection cesConnection = new CESConnection(cesUrl, cesTokenList);
+
+		return cesConnection;
+	}
+
+	/**
+	 * Get system property
+	 * 
+	 * @param key the key to retrieve the system property
+	 * @return the system property value
+	 */
+	public String getSystemProperty(String key) {
+		String result = System.getProperty(key);
+		if (StringUtils.isBlank(result)) {
+			String errorMessage = "You must provide a system property: " + key
+					+ " to use ISPW RestAPI Jenkins plugin";
+			throw new RuntimeException(errorMessage);
+		}
+
+		return StringUtils.trimToEmpty(result);
+	}
+	
+	/**
 	 * Returns the list of host connections.
 	 * 
 	 * @return list of host connections